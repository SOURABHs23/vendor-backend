Node.js Developer Assignment
Vendor Management System with Performance Metrics
Objective
Develop a Vendor Management System using Node.js. This system
will manage vendor profiles, track purchase orders, and calculate vendor performance metrics.
Core Features
1. Vendor Profile Management:
○ Model Design: Create a model to store vendor information, including name,
contact details, address, and a unique vendor code.
○ API Endpoints:
■ POST /vendors: Create a new vendor.
■ GET /vendors: List all vendors.
■ GET /vendors/:vendorId: Retrieve a specific vendor's details.
■ PUT /vendors/:vendorId: Update a vendor's details.
■ DELETE /vendors/:vendorId: Delete a vendor.
2. Purchase Order Tracking:
○ Model Design: Track purchase orders with fields like PO number, vendor
reference, order date, items, quantity, and status.
○ API Endpoints:
■ POST /purchase-orders: Create a purchase order.
■ GET /purchase-orders: List all purchase orders with an option to filter
by vendor.
■ GET /purchase-orders/:poId: Retrieve details of a specific purchase
order.

■ PUT /purchase-orders/:poId: Update a purchase order.
■ DELETE /purchase-orders/:poId: Delete a purchase order.
3. Vendor Performance Evaluation:
○ Metrics:
■ On-Time Delivery Rate: Percentage of orders delivered by the
promised date.
■ Quality Rating: Average of quality ratings given to a vendor’s purchase
orders.
■ Response Time: Average time taken by a vendor to acknowledge or
respond to purchase orders.
■ Fulfillment Rate: Percentage of purchase orders fulfilled without
issues.
○ Model Design: Add fields to the vendor model to store these performance
metrics.
○ API Endpoints:
■ GET /vendors/
/performance: Retrieve a vendor's performance metrics.
Data Models
1. Vendor Model
○ This model stores essential information about each vendor and their
performance metrics.
○ Fields:
■ name: String - Vendor's name.
■ contactDetails: String - Contact information of the vendor.
■ address: String - Physical address of the vendor.
■ vendorCode: String - A unique identifier for the vendor.
■ onTimeDeliveryRate: Number - Tracks the percentage of on-time
deliveries.
■ qualityRatingAvg: Number - Average rating of quality based on
purchase orders.
■ averageResponseTime: Number - Average time taken to acknowledge
purchase orders.
■ fulfillmentRate: Number - Percentage of purchase orders fulfilled
successfully.
2. Purchase Order (PO) Model
○ This model captures the details of each purchase order and is used to
calculate various performance metrics.
○ Fields:
■ poNumber: String - Unique number identifying the PO.
■ vendor: Reference - Link to the Vendor model.
■ orderDate: Date - Date when the order was placed.
■ deliveryDate: Date - Expected or actual delivery date of the order.
■ items: JSON - Details of items ordered.
■ quantity: Number - Total quantity of items in the PO.
■ status: String - Current status of the PO (e.g., pending, completed,
canceled).
■ qualityRating: Number - Rating given to the vendor for this PO
(nullable).
■ issueDate: Date - Timestamp when the PO was issued to the vendor.
■ acknowledgmentDate: Date, nullable - Timestamp when the vendor
acknowledged the PO.
3. Historical Performance Model
○ This model optionally stores historical data on vendor performance, enabling
trend analysis.
○ Fields:
■ vendor: Reference - Link to the Vendor model.
■ date: Date - Date of the performance record.
■ onTimeDeliveryRate: Number - Historical record of the on-time
delivery rate.
■ qualityRatingAvg: Number - Historical record of the quality rating
average.
■ averageResponseTime: Number - Historical record of the average
response time.
■ fulfillmentRate: Number - Historical record of the fulfillment rate.
Backend Logic
● Backend Logic for Performance Metrics:
1. On-Time Delivery Rate:
○ Calculated each time a PO status changes to 'completed'.
○ Logic: Count the number of completed POs delivered on or before the delivery
date and divide by the total number of completed POs for that vendor.
2. Quality Rating Average:
○ Updated upon the completion of each PO where a quality rating is provided.
○ Logic: Calculate the average of all quality rating values for completed POs of
the vendor.
3. Average Response Time:
○ Calculated each time a PO is acknowledged by the vendor.
○ Logic: Compute the time difference between issue date and acknowledgment
date for each PO, and then find the average of these times for all POs of the
vendor.
4. Fulfillment Rate:
○ Calculated upon any change in PO status.
○ Logic: Divide the number of successfully fulfilled POs (status 'completed'
without issues) by the total number of POs issued to the vendor.
API Endpoint Implementation
● Vendor Performance Endpoint (GET /vendors/
/performance):
○ Retrieves the calculated performance metrics for a specific vendor.
○ Should return data including on-time delivery rate, quality rating average,
average response time, and fulfillment rate.
● Update Acknowledgment Endpoint:
○ Consider an endpoint like POST /purchase-orders/
/acknowledge for vendors to acknowledge POs.
○ This endpoint will update the acknowledgment date and trigger the
recalculation of average response time.
Additional Technical Considerations
● Efficient Calculation: Ensure that the logic for calculating metrics is optimized to
handle large datasets without significant performance issues.
● Data Integrity: Include checks to handle scenarios like missing data points or division
by zero in calculations.
● Real-time Updates: Consider using event-based mechanisms to trigger metric
updates in real-time when related PO data is modified.
Technical Requirements
● Use the latest stable version of Node.js and NestJS.
● Adhere to RESTful principles in API design.
● Implement comprehensive data validations for models.
● Utilize the TypeORM or Mongoose for database interactions.
● Secure API endpoints with token-based authentication (JWT preferred).
● Follow best practices and style guidelines for JavaScript/TypeScript code.
● Document each API endpoint thoroughly.
Deliverables
● Complete source code in a public Git repository.
● A README file with setup instructions and details on using the API endpoints.
● A test suite demonstrating the functionality and reliability of the endpoints.
Submission Guidelines
● Host the code on a platform like GitHub or GitLab.
● Ensure the README is clear for easy setup and testing.
● Include instructions on how to run the test suite.
Creating a Docker image and submission on the hosted URL will be an added advantage.
This assignment tests your ability to create a functional Node.js based system for vendor
management, integrating aspects of data handling, API development, and basic performance
metric calculations.